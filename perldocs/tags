!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!	perlvar.man	/^    $!      If used numerically, yields the current value of the C "errno"$
"	perlvar.man	/^    $"      This is like $, except that it applies to array and slice values$
$	perlvar.man	/^    $$      The process number of the Perl running this script. You should$
$!	perlvar.man	/^    $!      If used numerically, yields the current value of the C "errno"$
$"	perlvar.man	/^    $"      This is like $, except that it applies to array and slice values$
$$	perlvar.man	/^    $$      The process number of the Perl running this script. You should$
$%	perlvar.man	/^    $%      The current page number of the currently selected output$
$&	perlvar.man	/^    $&      The string matched by the last successful pattern match (not$
$'	perlvar.man	/^    $'      The string following whatever was matched by the last successful$
$(	perlvar.man	/^    $(      The real gid of this process. If you are on a machine that$
$)	perlvar.man	/^    $)      The effective gid of this process. If you are on a machine that$
$+	perlvar.man	/^    $+      The text matched by the last bracket of the last successful$
$,	perlvar.man	/^    $,      The output field separator for the print operator. If defined,$
$-	perlvar.man	/^    $-      The number of lines left on the page of the currently selected$
$.	perlvar.man	/^    $.      Current line number for the last filehandle accessed.$
$/	perlvar.man	/^    $/      The input record separator, newline by default. This influences$
$0	perlvar.man	/^    $0      Contains the name of the program being executed.$
$:	perlvar.man	/^    $:      The current set of characters after which a string may be broken$
$;	perlvar.man	/^    $;      The subscript separator for multidimensional array emulation. If$
$<	perlvar.man	/^    $<      The real uid of this process. (Mnemonic: it's the uid you came$
$<*digits*>	perlvar.man	/^    $<*digits*>$
$=	perlvar.man	/^    $=      The current page length (printable lines) of the currently$
$>	perlvar.man	/^    $>      The effective uid of this process. Example:$
$?	perlvar.man	/^    $?      The status returned by the last pipe close, backtick (``)$
$?.	perlvar.man	/^    $?.$
$@	perlvar.man	/^    $@      The Perl syntax error message from the last eval() operator. If$
$a	perlvar.man	/^    $a$
$ACCUMULATOR	perlvar.man	/^    $ACCUMULATOR$
$ARG	perlvar.man	/^    $ARG$
$ARGV	perlvar.man	/^    $ARGV   contains the name of the current file when reading from <>.$
$b	perlvar.man	/^    $b      Special package variables when using sort(), see "sort" in$
$BASETIME	perlvar.man	/^    $BASETIME$
$CHILD_ERROR	perlvar.man	/^    $CHILD_ERROR$
$COMPILING	perlvar.man	/^    $COMPILING$
$DEBUGGING	perlvar.man	/^    $DEBUGGING$
$EFFECTIVE_GROUP_ID	perlvar.man	/^    $EFFECTIVE_GROUP_ID$
$EFFECTIVE_USER_ID	perlvar.man	/^    $EFFECTIVE_USER_ID$
$EGID	perlvar.man	/^    $EGID$
$ENV	perlvar.man	/^    $ENV{expr}$
$ERRNO	perlvar.man	/^    $ERRNO$
$EUID	perlvar.man	/^    $EUID$
$EVAL_ERROR	perlvar.man	/^    $EVAL_ERROR$
$EXCEPTIONS_BEING_CAUGHT	perlvar.man	/^    $EXCEPTIONS_BEING_CAUGHT$
$EXECUTABLE_NAME	perlvar.man	/^    $EXECUTABLE_NAME$
$EXTENDED_OS_ERROR	perlvar.man	/^    $EXTENDED_OS_ERROR$
$FORMAT_FORMFEED	perlvar.man	/^    $FORMAT_FORMFEED$
$FORMAT_LINES_LEFT	perlvar.man	/^    $FORMAT_LINES_LEFT$
$FORMAT_LINES_PER_PAGE	perlvar.man	/^    $FORMAT_LINES_PER_PAGE$
$FORMAT_LINE_BREAK_CHARACTERS	perlvar.man	/^    $FORMAT_LINE_BREAK_CHARACTERS$
$FORMAT_NAME	perlvar.man	/^    $FORMAT_NAME$
$FORMAT_PAGE_NUMBER	perlvar.man	/^    $FORMAT_PAGE_NUMBER$
$FORMAT_TOP_NAME	perlvar.man	/^    $FORMAT_TOP_NAME$
$GID	perlvar.man	/^    $GID$
$INPLACE_EDIT	perlvar.man	/^    $INPLACE_EDIT$
$INPUT_LINE_NUMBER	perlvar.man	/^    $INPUT_LINE_NUMBER$
$INPUT_RECORD_SEPARATOR	perlvar.man	/^    $INPUT_RECORD_SEPARATOR$
$LAST_PAREN_MATCH	perlvar.man	/^    $LAST_PAREN_MATCH$
$LAST_REGEXP_CODE_RESULT	perlvar.man	/^    $LAST_REGEXP_CODE_RESULT$
$LAST_SUBMATCH_RESULT	perlvar.man	/^    $LAST_SUBMATCH_RESULT$
$LIST_SEPARATOR	perlvar.man	/^    $LIST_SEPARATOR$
$MATCH	perlvar.man	/^    $MATCH$
$NR	perlvar.man	/^    $NR$
$OFS	perlvar.man	/^    $OFS$
$ORS	perlvar.man	/^    $ORS$
$OSNAME	perlvar.man	/^    $OSNAME$
$OS_ERROR	perlvar.man	/^    $OS_ERROR$
$OUTPUT_AUTOFLUSH	perlvar.man	/^    $OUTPUT_AUTOFLUSH$
$OUTPUT_FIELD_SEPARATOR	perlvar.man	/^    $OUTPUT_FIELD_SEPARATOR$
$OUTPUT_RECORD_SEPARATOR	perlvar.man	/^    $OUTPUT_RECORD_SEPARATOR$
$PERLDB	perlvar.man	/^    $PERLDB$
$PERL_VERSION	perlvar.man	/^    $PERL_VERSION$
$PID	perlvar.man	/^    $PID$
$POSTMATCH	perlvar.man	/^    $POSTMATCH$
$PREMATCH	perlvar.man	/^    $PREMATCH$
$PROCESS_ID	perlvar.man	/^    $PROCESS_ID$
$PROGRAM_NAME	perlvar.man	/^    $PROGRAM_NAME$
$REAL_GROUP_ID	perlvar.man	/^    $REAL_GROUP_ID$
$REAL_USER_ID	perlvar.man	/^    $REAL_USER_ID$
$RS	perlvar.man	/^    $RS$
$SIG	perlvar.man	/^    $SIG{expr}$
$SUBSCRIPT_SEPARATOR	perlvar.man	/^    $SUBSCRIPT_SEPARATOR$
$SUBSEP	perlvar.man	/^    $SUBSEP$
$SYSTEM_FD_MAX	perlvar.man	/^    $SYSTEM_FD_MAX$
$UID	perlvar.man	/^    $UID$
$WARNING	perlvar.man	/^    $WARNING$
$[	perlvar.man	/^    $[      The index of the first element in an array, and of the first$
$\	perlvar.man	/^    $\      The output record separator for the print operator. If defined,$
$]	perlvar.man	/^    $]      The version + patchlevel / 1000 of the Perl interpreter. This$
$^	perlvar.man	/^    $^      The name of the current top-of-page format for the currently$
$^A	perlvar.man	/^    $^A     The current value of the write() accumulator for format() lines.$
$^C	perlvar.man	/^    $^C     The current value of the flag associated with the -c switch.$
$^D	perlvar.man	/^    $^D     The current value of the debugging flags. (Mnemonic: value of -D$
$^E	perlvar.man	/^    $^E     Error information specific to the current operating system. At$
$^F	perlvar.man	/^    $^F     The maximum system file descriptor, ordinarily 2. System file$
$^H	perlvar.man	/^    $^H     WARNING: This variable is strictly for internal use only. Its$
$^I	perlvar.man	/^    $^I     The current value of the inplace-edit extension. Use "undef" to$
$^L	perlvar.man	/^    $^L     What formats output as a form feed. Default is \f.$
$^M	perlvar.man	/^    $^M     By default, running out of memory is an untrappable, fatal$
$^N	perlvar.man	/^    $^N     The text matched by the used group most-recently closed (i.e.$
$^O	perlvar.man	/^    $^O     The name of the operating system under which this copy of Perl$
$^P	perlvar.man	/^    $^P     The internal variable for debugging support. The meanings of the$
$^R	perlvar.man	/^    $^R     The result of evaluation of the last successful "(?{ code })"$
$^S	perlvar.man	/^    $^S     Current state of the interpreter.$
$^T	perlvar.man	/^    $^T     The time at which the program began running, in seconds since$
$^V	perlvar.man	/^    $^V     The revision, version, and subversion of the Perl interpreter,$
$^W	perlvar.man	/^    $^W     The current value of the warning switch, initially true if -w$
$^X	perlvar.man	/^    $^X     The name used to execute the current copy of Perl, from C's$
$_	perlvar.man	/^    $_      The default input and pattern-searching space. The following$
$`	perlvar.man	/^    $`      The string preceding whatever was matched by the last successful$
${^CHILD_ERROR_NATIVE}	perlvar.man	/^    ${^CHILD_ERROR_NATIVE}$
${^ENCODING}	perlvar.man	/^    ${^ENCODING}$
${^MATCH}	perlvar.man	/^    ${^MATCH}$
${^OPEN}	perlvar.man	/^    ${^OPEN}$
${^POSTMATCH}	perlvar.man	/^    ${^POSTMATCH}$
${^PREMATCH}	perlvar.man	/^    ${^PREMATCH}$
${^RE_DEBUG_FLAGS}	perlvar.man	/^    ${^RE_DEBUG_FLAGS}$
${^RE_TRIE_MAXBUF}	perlvar.man	/^    ${^RE_TRIE_MAXBUF}$
${^TAINT}	perlvar.man	/^    ${^TAINT}$
${^UNICODE}	perlvar.man	/^    ${^UNICODE}$
${^UTF8CACHE}	perlvar.man	/^    ${^UTF8CACHE}$
${^UTF8LOCALE}	perlvar.man	/^    ${^UTF8LOCALE}$
${^WARNING_BITS}	perlvar.man	/^    ${^WARNING_BITS}$
${^WIN32_SLOPPY_STAT}	perlvar.man	/^    ${^WIN32_SLOPPY_STAT}$
$|	perlvar.man	/^    $|      If set to nonzero, forces a flush right away and after every$
$~	perlvar.man	/^    $~      The name of the current report format for the currently selected$
%	perlvar.man	/^    $%      The current page number of the currently selected output$
%!	perlvar.man	/^    %!      Each element of "%!" has a true value only if $! is set to that$
%+	perlvar.man	/^    %+      Similar to "@+", the "%+" hash allows access to the named$
%-	perlvar.man	/^    %-      Similar to "%+", this variable allows access to the named$
%ENV	perlvar.man	/^    %ENV$
%ERRNO	perlvar.man	/^    %ERRNO$
%INC	perlvar.man	/^    %INC    The hash %INC contains entries for each filename included via$
%LAST_PAREN_MATCH	perlvar.man	/^    %LAST_PAREN_MATCH$
%OS_ERROR	perlvar.man	/^    %OS_ERROR$
%SIG	perlvar.man	/^    %SIG$
%^H	perlvar.man	/^    %^H     The %^H hash provides the same scoping semantic as $^H. This$
&	perlvar.man	/^    $&      The string matched by the last successful pattern match (not$
'	perlvar.man	/^    $'      The string following whatever was matched by the last successful$
(	perlvar.man	/^    $(      The real gid of this process. If you are on a machine that$
)	perlvar.man	/^    $)      The effective gid of this process. If you are on a machine that$
+	perlvar.man	/^    $+      The text matched by the last bracket of the last successful$
,	perlvar.man	/^    $,      The output field separator for the print operator. If defined,$
-	perlvar.man	/^    $-      The number of lines left on the page of the currently selected$
-A	perlfunc.man	/^                -A  Same for access time.$
-B	perlfunc.man	/^                -B  File is a "binary" file (opposite of -T).$
-b	perlfunc.man	/^                -b  File is a block special file.$
-c	perlfunc.man	/^                -c  File is a character special file.$
-C	perlfunc.man	/^                -C  Same for inode change time (Unix, may differ for other platforms)$
-d	perlfunc.man	/^                -d  File is a directory.$
-e	perlfunc.man	/^                -e  File exists.$
-f	perlfunc.man	/^                -f  File is a plain file.$
-g	perlfunc.man	/^                -g  File has setgid bit set.$
-k	perlfunc.man	/^                -k  File has sticky bit set.$
-l	perlfunc.man	/^                -l  File is a symbolic link.$
-M	perlfunc.man	/^                -M  Script start time minus file modification time, in days.$
-o	perlfunc.man	/^                -o  File is owned by effective uid.$
-O	perlfunc.man	/^                -O  File is owned by real uid.$
-p	perlfunc.man	/^                -p  File is a named pipe (FIFO), or Filehandle is a pipe.$
-r	perlfunc.man	/^                -r  File is readable by effective uid/gid.$
-R	perlfunc.man	/^                -R  File is readable by real uid/gid.$
-S	perlfunc.man	/^                -S  File is a socket.$
-s	perlfunc.man	/^                -s  File has nonzero size (returns size in bytes).$
-t	perlfunc.man	/^                -t  Filehandle is opened to a tty.$
-T	perlfunc.man	/^                -T  File is an ASCII text file (heuristic guess).$
-u	perlfunc.man	/^                -u  File has setuid bit set.$
-w	perlfunc.man	/^                -w  File is writable by effective uid/gid.$
-W	perlfunc.man	/^                -W  File is writable by real uid/gid.$
-x	perlfunc.man	/^                -x  File is executable by effective uid/gid.$
-X	perlfunc.man	/^                -X  File is executable by real uid/gid.$
-z	perlfunc.man	/^                -z  File has zero size (is empty).$
.	perlvar.man	/^    $.      Current line number for the last filehandle accessed.$
/	perlvar.man	/^    $/      The input record separator, newline by default. This influences$
0	perlvar.man	/^    $0      Contains the name of the program being executed.$
:	perlvar.man	/^    $:      The current set of characters after which a string may be broken$
;	perlvar.man	/^    $;      The subscript separator for multidimensional array emulation. If$
<	perlvar.man	/^    $<      The real uid of this process. (Mnemonic: it's the uid you came$
<*digits*>	perlvar.man	/^    $<*digits*>$
=	perlvar.man	/^    $=      The current page length (printable lines) of the currently$
>	perlvar.man	/^    $>      The effective uid of this process. Example:$
?	perlvar.man	/^    $?      The status returned by the last pipe close, backtick (``)$
?.	perlvar.man	/^    $?.$
@	perlvar.man	/^    $@      The Perl syntax error message from the last eval() operator. If$
@+	perlvar.man	/^    @+      This array holds the offsets of the ends of the last successful$
@-	perlvar.man	/^    @-      $-[0] is the offset of the start of the last successful match.$
@ARG	perlvar.man	/^    @ARG$
@ARGV	perlvar.man	/^    @ARGV   The array @ARGV contains the command-line arguments intended for$
@F	perlvar.man	/^    @F      The array @F contains the fields of each line read in when$
@INC	perlvar.man	/^    @INC    The array @INC contains the list of places that the "do EXPR",$
@LAST_MATCH_END	perlvar.man	/^    @LAST_MATCH_END$
@LAST_MATCH_START	perlvar.man	/^    @LAST_MATCH_START$
@_	perlvar.man	/^    @_      Within a subroutine the array @_ contains the parameters passed$
a	perlvar.man	/^    $a$
A	perlfunc.man	/^                -A  Same for access time.$
abbrev	textabbrev.man	/^        abbrev $hashref, LIST$
abort	posix.man	/^    abort   This is identical to the C function "abort()". It terminates the$
abs	perlfunc.man	/^    abs VALUE$
abs_path	cwd.man	/^    abs_path$
accept	perlfunc.man	/^    accept NEWSOCKET,GENERICSOCKET$
access	posix.man	/^    access  Determines the accessibility of a file.$
ACCUMULATOR	perlvar.man	/^    $ACCUMULATOR$
acos	posix.man	/^    acos    This is identical to the C function "acos()", returning the$
alarm	perlfunc.man	/^    alarm SECONDS$
all_keys	hashutil.man	/^    all_keys$
ARG	perlvar.man	/^    $ARG$
ARGV	perlvar.man	/^    $ARGV   contains the name of the current file when reading from <>.$
asctime	posix.man	/^    asctime This is identical to the C function "asctime()". It returns a$
asin	posix.man	/^    asin    This is identical to the C function "asin()", returning the$
assert	posix.man	/^    assert  Unimplemented, but you can use "die" in perlfunc and the Carp$
atan	posix.man	/^    atan    This is identical to the C function "atan()", returning the$
atan2	perlfunc.man	/^    atan2 Y,X$
atexit	posix.man	/^    atexit  atexit() is C-specific: use "END {}" instead, see perlsub.$
atof	posix.man	/^    atof    atof() is C-specific. Perl converts strings to numbers$
atoi	posix.man	/^    atoi    atoi() is C-specific. Perl converts strings to numbers$
atol	posix.man	/^    atol    atol() is C-specific. Perl converts strings to numbers$
attributes	pragmaattributes.man	/^    attributes - get/set subroutine or variable attributes$
attrs	pragmaattrs.man	/^    attrs - set/get attributes of a subroutine (deprecated)$
autodie	pragmaautodie.man	/^    autodie - Replace functions with ones that succeed or die with lexical$
AutoSplit	autosplit.man	1
autosplit	autosplit.man	/^     autosplit($file, $dir, $keep, $check, $modtime);$
autosplit_lib_modules	autosplit.man	/^     autosplit_lib_modules(@modules);$
autouse	pragmaautouse.man	/^    autouse - postpone load of modules until a function is used$
b	perlfunc.man	/^                -b  File is a block special file.$
B	perlfunc.man	/^                -B  File is a "binary" file (opposite of -T).$
BAIL_OUT	testmore.man	/^    BAIL_OUT$
base	pragmabase.man	/^    base - Establish an ISA relationship with base classes at compile time$
basename	filebasename.man	/^    "basename"$
BASETIME	perlvar.man	/^    $BASETIME$
Benchmark	benchmark.man	1
bigint	pragmabigint.man	/^    bigint - Transparent BigInteger support for Perl$
bignum	pragmabignum.man	/^    bignum - Transparent BigNumber support for Perl$
bigrat	pragmabigrat.man	/^    bigrat - Transparent BigNumber/BigRational support for Perl$
bind	perlfunc.man	/^    bind SOCKET,NAME$
binmode	perlfunc.man	/^    binmode FILEHANDLE, LAYER$
bless	perlfunc.man	/^    bless REF,CLASSNAME$
blessed	scalarutil.man	/^    blessed EXPR$
blib	pragmablib.man	/^    blib - Use MakeMaker's uninstalled version of a package$
break	perlfunc.man	/^    break   Break out of a "given()" block.$
bsearch	posix.man	/^    bsearch bsearch() not supplied. For doing binary search on wordlists,$
builder	testmore.man	/^    builder$
bytes	pragmabytes.man	/^    bytes - Perl pragma to force byte semantics rather than character$
C	perlfunc.man	/^                -C  Same for inode change time (Unix, may differ for other platforms)$
c	perlfunc.man	/^                -c  File is a character special file.$
caller	perlfunc.man	/^    caller EXPR$
calloc	posix.man	/^    calloc  calloc() is C-specific. Perl does memory management$
can_ok	testmore.man	/^    can_ok$
carp	carp.man	/^    carp - warn of errors (from perspective of caller)$
Carp	carp.man	1
case	switch.man	/^            case 1          { print "number 1" }$
catch	error.man	/^    catch CLASS with BLOCK$
ceil	posix.man	/^    ceil    This is identical to the C function "ceil()", returning the$
charnames	pragmacharnames.man	/^    charnames - define character names for "\N{named}" string literal$
chdir	perlfunc.man	/^    chdir EXPR$
CHILD_ERROR	perlvar.man	/^    $CHILD_ERROR$
chmod	perlfunc.man	/^    chmod LIST$
chomp	perlfunc.man	/^    chomp VARIABLE$
chop	perlfunc.man	/^    chop VARIABLE$
chown	perlfunc.man	/^    chown LIST$
chr	perlfunc.man	/^    chr NUMBER$
chroot	perlfunc.man	/^    chroot FILENAME$
Class::Struct	classstruct.man	1
clearallcache	benchmark.man	/^    clearallcache ( )$
clearcache	benchmark.man	/^    clearcache ( COUNT )$
clearerr	posix.man	/^    clearerr$
clock	posix.man	/^    clock   This is identical to the C function "clock()", returning the$
close	perlfunc.man	/^    close FILEHANDLE$
closedir	perlfunc.man	/^    closedir DIRHANDLE$
cluck	carp.man	/^    cluck - warn of errors with stack backtrace (not exported by default)$
cmp	filecompare.man	/^    File::Compare::cmp is a synonym for File::Compare::compare. It is$
cmpthese	benchmark.man	/^    cmpthese ( COUNT, CODEHASHREF, [ STYLE ] )$
cmp_ok	testmore.man	/^    cmp_ok$
compare	filecompare.man	/^    The File::Compare::compare function compares the contents of two$
compare_text	filecompare.man	/^    File::Compare::compare_text does a line by line comparison of the two$
COMPILING	perlvar.man	/^    $COMPILING$
confess	carp.man	/^    confess - die of errors with stack backtrace$
connect	perlfunc.man	/^    connect SOCKET,NAME$
constant	pragmaconstant.man	/^    constant - Perl pragma to declare constants$
continue	perlfunc.man	/^    continue BLOCK$
copy	filecopy.man	/^    copy$
cos	perlfunc.man	/^    cos EXPR$
cosh	posix.man	/^    cosh    This is identical to the C function "cosh()", for returning the$
countit	benchmark.man	/^    countit(TIME, CODE)$
creat	posix.man	/^    creat   Create a new file. This returns a file descriptor like the ones$
croak	carp.man	/^    croak - die of errors (from perspective of caller)$
crypt	perlfunc.man	/^    crypt PLAINTEXT,SALT$
ctermid	posix.man	/^    ctermid Generates the path name for the controlling terminal.$
ctime	posix.man	/^    ctime   This is identical to the C function "ctime()" and equivalent to$
cuserid	posix.man	/^    cuserid Get the login name of the owner of the current process.$
cwd	cwd.man	/^    cwd$
Cwd	cwd.man	1
d	perlfunc.man	/^                -d  File is a directory.$
Data::Dumper	datadumper.man	1
Data::Dumper->Dump	datadumper.man	/^        print Data::Dumper->Dump([$foo, $bar], [qw(foo *ary)]);$
dbmclose	perlfunc.man	/^    dbmclose HASH$
dbmopen	perlfunc.man	/^    dbmopen HASH,DBNAME,MASK$
DEBUGGING	perlvar.man	/^    $DEBUGGING$
defined	perlfunc.man	/^    defined EXPR$
delete	perlfunc.man	/^    delete EXPR$
delete_package	symbol.man	/^    "Symbol::delete_package" wipes out a whole package namespace. Note this$
delimited_pat	textbalanced.man	/^  "delimited_pat"$
diag	testmore.man	/^    diag$
diagnostics	pragmadiagnostics.man	/^$
die	perlfunc.man	/^    die LIST$
difftime	posix.man	/^    difftime$
dirname	filebasename.man	/^    "dirname"$
disablecache	benchmark.man	/^    disablecache ( )$
div	posix.man	/^    div     div() is C-specific, use "int" in perlfunc on the usual "/"$
do	perlfunc.man	/^    do BLOCK$
done_testing	testmore.man	/^    done_testing$
dualvar	scalarutil.man	/^    dualvar NUM, STRING$
dump	perlfunc.man	/^    dump LABEL$
Dumper	datadumper.man	/^        print Dumper($foo, $bar);$
dup	posix.man	/^    dup     This is similar to the C function "dup()", for duplicating a$
dup2	posix.man	/^    dup2    This is similar to the C function "dup2()", for duplicating a$
e	perlfunc.man	/^                -e  File exists.$
each	perlfunc.man	/^    each HASH$
EFFECTIVE_GROUP_ID	perlvar.man	/^    $EFFECTIVE_GROUP_ID$
EFFECTIVE_USER_ID	perlvar.man	/^    $EFFECTIVE_USER_ID$
EGID	perlvar.man	/^    $EGID$
enablecache	benchmark.man	/^    enablecache ( )$
encoding	pragmaencoding.man	/^    encoding - allows you to write your script in non-ascii or non-utf8$
endgrent	perlfunc.man	/^    endgrent$
endhostent	perlfunc.man	/^    endhostent$
endnetent	perlfunc.man	/^    endnetent$
endprotoent	perlfunc.man	/^    endprotoent$
endpwent	perlfunc.man	/^    endpwent$
endservent	perlfunc.man	/^    endservent$
ENV	perlvar.man	/^    %ENV$
eof	perlfunc.man	/^    eof FILEHANDLE$
eq_array	testmore.man	/^    eq_array$
eq_hash	testmore.man	/^    eq_hash$
eq_set	testmore.man	/^    eq_set$
ERRNO	perlvar.man	/^    $ERRNO$
Errno	errno.man	/^    Errno - System errno constants$
errno	posix.man	/^    errno   Returns the value of errno.$
Error	error.man	1
EUID	perlvar.man	/^    $EUID$
eval	perlfunc.man	/^    eval EXPR$
EVAL_ERROR	perlvar.man	/^    $EVAL_ERROR$
except	error.man	/^    except BLOCK$
EXCEPTIONS_BEING_CAUGHT	perlvar.man	/^    $EXCEPTIONS_BEING_CAUGHT$
exec	perlfunc.man	/^    exec LIST$
execl	posix.man	/^    execl   execl() is C-specific, see "exec" in perlfunc.$
execle	posix.man	/^    execle  execle() is C-specific, see "exec" in perlfunc.$
execlp	posix.man	/^    execlp  execlp() is C-specific, see "exec" in perlfunc.$
EXECUTABLE_NAME	perlvar.man	/^    $EXECUTABLE_NAME$
execute_tests	testharness.man	/^  execute_tests( tests => \@test_files, out => \*FH )$
execv	posix.man	/^    execv   execv() is C-specific, see "exec" in perlfunc.$
execve	posix.man	/^    execve  execve() is C-specific, see "exec" in perlfunc.$
execvp	posix.man	/^    execvp  execvp() is C-specific, see "exec" in perlfunc.$
exists	perlfunc.man	/^    exists EXPR$
exit	perlfunc.man	/^    exit EXPR$
exp	perlfunc.man	/^    exp EXPR$
expand	texttabs.man	/^      @lines_without_tabs = expand(@lines_with_tabs);$
explain	testmore.man	/^    explain$
EXTENDED_OS_ERROR	perlvar.man	/^    $EXTENDED_OS_ERROR$
extract_bracketed	textbalanced.man	/^  "extract_bracketed"$
extract_codeblock	textbalanced.man	/^  "extract_codeblock"$
extract_delimited	textbalanced.man	/^  "extract_delimited"$
extract_multiple	textbalanced.man	/^  "extract_multiple"$
extract_quotelike	textbalanced.man	/^  "extract_quotelike"$
extract_tagged	textbalanced.man	/^  "extract_tagged"$
extract_variable	textbalanced.man	/^  "extract_variable"$
F	perlvar.man	/^    @F      The array @F contains the fields of each line read in when$
f	perlfunc.man	/^                -f  File is a plain file.$
fabs	posix.man	/^    fabs    This is identical to Perl's builtin "abs()" function for$
fail	testmore.man	/^    fail$
fastcwd	cwd.man	/^    fastcwd$
fastgetcwd	cwd.man	/^    fastgetcwd$
fast_abs_path	cwd.man	/^    fast_abs_path$
fclose	posix.man	/^    fclose  Use method "IO::Handle::close()" instead, or see "close" in$
fcntl	perlfunc.man	/^    fcntl FILEHANDLE,FUNCTION,SCALAR$
fdopen	posix.man	/^    fdopen  Use method "IO::Handle::new_from_fd()" instead, or see "open" in$
feature	pragmafeature.man	/^    feature - Perl pragma to enable new syntactic features$
feof	posix.man	/^    feof    Use method "IO::Handle::eof()" instead, or see "eof" in$
ferror	posix.man	/^    ferror  Use method "IO::Handle::error()" instead.$
fflush	posix.man	/^    fflush  Use method "IO::Handle::flush()" instead. See also$
fgetc	posix.man	/^    fgetc   Use method "IO::Handle::getc()" instead, or see "read" in$
fgetpos	posix.man	/^    fgetpos Use method "IO::Seekable::getpos()" instead, or see "seek" in L.$
fgets	posix.man	/^    fgets   Use method "IO::Handle::gets()" instead. Similar to <>, also$
fields	pragmafields.man	/^    fields - compile-time class fields$
File::Basename	filebasename.man	1
File::CheckTree	filechecktree.man	1
File::Compare	filecompare.man	1
File::Copy	filecopy.man	1
File::Find	filefind.man	1
File::Listing	filelisting.man	1
File::Path	filepath.man	1
File::Temp	filetemp.man	1
fileno	perlfunc.man	/^    fileno FILEHANDLE$
fileparse	filebasename.man	/^    "fileparse"$
fileparse_set_fstype	filebasename.man	/^    "fileparse_set_fstype"$
filetest	pragmafiletest.man	/^    filetest - Perl pragma to control the filetest permission operators$
fill	textwrap.man	/^    Text::Wrap::fill() is a simple multi-paragraph formatter. It formats$
finally	error.man	/^    finally BLOCK$
find	filefind.man	/^        find(\&wanted, @directories_to_search);$
finddepth	filefind.man	/^        finddepth(\&wanted, @directories_to_search);$
first	listutil.man	/^    first BLOCK LIST$
flock	perlfunc.man	/^    flock FILEHANDLE,OPERATION$
floor	posix.man	/^    floor   This is identical to the C function "floor()", returning the$
fmod	posix.man	/^    fmod    This is identical to the C function "fmod()".$
fopen	posix.man	/^    fopen   Use method "IO::File::open()" instead, or see "open" in$
fork	perlfunc.man	/^    fork    Does a fork(2) system call to create a new process running the$
format	perlfunc.man	/^    format  Declare a picture format for use by the "write" function. For$
FORMAT_FORMFEED	perlvar.man	/^    $FORMAT_FORMFEED$
FORMAT_LINES_LEFT	perlvar.man	/^    $FORMAT_LINES_LEFT$
FORMAT_LINES_PER_PAGE	perlvar.man	/^    $FORMAT_LINES_PER_PAGE$
FORMAT_LINE_BREAK_CHARACTERS	perlvar.man	/^    $FORMAT_LINE_BREAK_CHARACTERS$
FORMAT_NAME	perlvar.man	/^    $FORMAT_NAME$
FORMAT_PAGE_NUMBER	perlvar.man	/^    $FORMAT_PAGE_NUMBER$
FORMAT_TOP_NAME	perlvar.man	/^    $FORMAT_TOP_NAME$
formline	perlfunc.man	/^    formline PICTURE,LIST$
fpathconf	posix.man	/^    fpathconf$
fprintf	posix.man	/^    fprintf fprintf() is C-specific, see "printf" in perlfunc instead.$
fputc	posix.man	/^    fputc   fputc() is C-specific, see "print" in perlfunc instead.$
fputs	posix.man	/^    fputs   fputs() is C-specific, see "print" in perlfunc instead.$
fread	posix.man	/^    fread   fread() is C-specific, see "read" in perlfunc instead.$
free	posix.man	/^    free    free() is C-specific. Perl does memory management transparently.$
freopen	posix.man	/^    freopen freopen() is C-specific, see "open" in perlfunc instead.$
frexp	posix.man	/^    frexp   Return the mantissa and exponent of a floating-point number.$
fscanf	posix.man	/^    fscanf  fscanf() is C-specific, use <> and regular expressions instead.$
fseek	posix.man	/^    fseek   Use method "IO::Seekable::seek()" instead, or see "seek" in$
fsetpos	posix.man	/^    fsetpos Use method "IO::Seekable::setpos()" instead, or seek "seek" in$
fstat	posix.man	/^    fstat   Get file status. This uses file descriptors such as those$
fsync	posix.man	/^    fsync   Use method "IO::Handle::sync()" instead.$
ftell	posix.man	/^    ftell   Use method "IO::Seekable::tell()" instead, or see "tell" in$
fwrite	posix.man	/^    fwrite  fwrite() is C-specific, see "print" in perlfunc instead.$
g	perlfunc.man	/^                -g  File has setgid bit set.$
geniosym	symbol.man	/^    "Symbol::geniosym" creates an anonymous IO handle. This can be assigned$
gensym	symbol.man	/^    "Symbol::gensym" creates an anonymous glob and returns a reference to$
gen_delimited_pat	textbalanced.man	/^  "gen_delimited_pat"$
gen_extract_tagged	textbalanced.man	/^  "gen_extract_tagged"$
getc	perlfunc.man	/^    getc FILEHANDLE$
getchar	posix.man	/^    getchar Returns one character from STDIN. Identical to Perl's "getc()",$
getcwd	cwd.man	/^    getcwd$
getdcwd	cwd.man	/^    getdcwd$
getegid	posix.man	/^    getegid Returns the effective group identifier. Similar to Perl' s$
getenv	posix.man	/^    getenv  Returns the value of the specified environment variable. The$
geteuid	posix.man	/^    geteuid Returns the effective user identifier. Identical to Perl's$
getgid	posix.man	/^    getgid  Returns the user's real group identifier. Similar to Perl's$
getgrent	perlfunc.man	/^    getgrent$
getgrgid	perlfunc.man	/^    getgrgid GID$
getgrnam	perlfunc.man	/^    getgrnam NAME$
getgroups	posix.man	/^    getgroups$
gethostbyaddr	perlfunc.man	/^    gethostbyaddr ADDR,ADDRTYPE$
gethostbyname	perlfunc.man	/^    gethostbyname NAME$
gethostent	perlfunc.man	/^    gethostent$
getlogin	perlfunc.man	/^    getlogin$
getnetbyaddr	perlfunc.man	/^    getnetbyaddr ADDR,ADDRTYPE$
getnetbyname	perlfunc.man	/^    getnetbyname NAME$
getnetent	perlfunc.man	/^    getnetent$
getopt	getoptstd.man	/^        getopt('oDI');    # -o, -D & -I take arg.  Sets $opt_* as a side effect.$
Getopt::Long	getoptlong.man	1
Getopt::Std	getoptstd.man	1
GetOptions	getoptlong.man	/^      $result = GetOptions ("length=i" => \$length,    # numeric$
getopts	getoptstd.man	/^        getopts('oif:');  # -o & -i are boolean flags, -f takes an argument$
getpeername	perlfunc.man	/^    getpeername SOCKET$
getpgrp	perlfunc.man	/^    getpgrp PID$
getpid	posix.man	/^    getpid  Returns the process identifier. Identical to Perl's builtin$
getppid	perlfunc.man	/^    getppid Returns the process id of the parent process.$
getpriority	perlfunc.man	/^    getpriority WHICH,WHO$
getprotobyname	perlfunc.man	/^    getprotobyname NAME$
getprotobynumber	perlfunc.man	/^    getprotobynumber NUMBER$
getprotoent	perlfunc.man	/^    getprotoent$
getpwent	perlfunc.man	/^    getpwent$
getpwnam	perlfunc.man	/^    getpwnam NAME$
getpwuid	perlfunc.man	/^    getpwuid UID$
gets	posix.man	/^    gets    Returns one line from "STDIN", similar to <>, also known as the$
getservbyname	perlfunc.man	/^    getservbyname NAME,PROTO$
getservbyport	perlfunc.man	/^    getservbyport PORT,PROTO$
getservent	perlfunc.man	/^    getservent$
getsockname	perlfunc.man	/^    getsockname SOCKET$
getsockopt	perlfunc.man	/^    getsockopt SOCKET,LEVEL,OPTNAME$
getuid	posix.man	/^    getuid  Returns the user's identifier. Identical to Perl's builtin $<$
GID	perlvar.man	/^    $GID$
glob	perlfunc.man	/^    glob EXPR$
gmtime	perlfunc.man	/^    gmtime EXPR$
goto	perlfunc.man	/^    goto LABEL$
grep	perlfunc.man	/^    grep BLOCK LIST$
Hash::Util	hashutil.man	1
hash_ref_unlocked	hashutil.man	/^    hash_ref_unlocked$
hash_seed	hashutil.man	/^    hash_seed$
hash_unlocked	hashutil.man	/^    hash_unlocked$
hex	perlfunc.man	/^    hex EXPR$
hidden_keys	hashutil.man	/^    hidden_keys$
hidden_ref_keys	hashutil.man	/^    hidden_ref_keys$
hv_store	hashutil.man	/^    hv_store$
if	pragmaif.man	/^    if - "use" a Perl module if a condition holds$
import	perlfunc.man	/^    import LIST$
INC	perlvar.man	/^    @INC    The array @INC contains the list of places that the "do EXPR",$
index	perlfunc.man	/^    index STR,SUBSTR,POSITION$
INPLACE_EDIT	perlvar.man	/^    $INPLACE_EDIT$
INPUT_LINE_NUMBER	perlvar.man	/^    $INPUT_LINE_NUMBER$
INPUT_RECORD_SEPARATOR	perlvar.man	/^    $INPUT_RECORD_SEPARATOR$
int	perlfunc.man	/^    int EXPR$
integer	pragmainteger.man	/^    integer - Perl pragma to use integer arithmetic instead of floating$
ioctl	perlfunc.man	/^    ioctl FILEHANDLE,FUNCTION,SCALAR$
is	testmore.man	/^    is$
isalnum	posix.man	/^    isalnum This is identical to the C function, except that it can apply to$
isalpha	posix.man	/^    isalpha This is identical to the C function, except that it can apply to$
isatty	posix.man	/^    isatty  Returns a boolean indicating whether the specified filehandle is$
isa_ok	testmore.man	/^    isa_ok$
iscntrl	posix.man	/^    iscntrl This is identical to the C function, except that it can apply to$
isdigit	posix.man	/^    isdigit This is identical to the C function, except that it can apply to$
isgraph	posix.man	/^    isgraph This is identical to the C function, except that it can apply to$
islower	posix.man	/^    islower This is identical to the C function, except that it can apply to$
isnt	testmore.man	/^    isnt$
isprint	posix.man	/^    isprint This is identical to the C function, except that it can apply to$
ispunct	posix.man	/^    ispunct This is identical to the C function, except that it can apply to$
isspace	posix.man	/^    isspace This is identical to the C function, except that it can apply to$
isupper	posix.man	/^    isupper This is identical to the C function, except that it can apply to$
isvstring	scalarutil.man	/^    isvstring EXPR$
isweak	scalarutil.man	/^    isweak EXPR$
isxdigit	posix.man	/^    isxdigit$
is_deeply	testmore.man	/^    is_deeply$
join	perlfunc.man	/^    join EXPR,LIST$
k	perlfunc.man	/^                -k  File has sticky bit set.$
keys	perlfunc.man	/^    keys HASH$
kill	perlfunc.man	/^    kill SIGNAL, LIST$
l	perlfunc.man	/^                -l  File is a symbolic link.$
labs	posix.man	/^    labs    (For returning absolute values of long integers.) labs() is$
last	perlfunc.man	/^    last LABEL$
LAST_MATCH_END	perlvar.man	/^    @LAST_MATCH_END$
LAST_MATCH_START	perlvar.man	/^    @LAST_MATCH_START$
LAST_PAREN_MATCH	perlvar.man	/^    $LAST_PAREN_MATCH$
LAST_REGEXP_CODE_RESULT	perlvar.man	/^    $LAST_REGEXP_CODE_RESULT$
LAST_SUBMATCH_RESULT	perlvar.man	/^    $LAST_SUBMATCH_RESULT$
lc	perlfunc.man	/^    lc EXPR$
lcfirst	perlfunc.man	/^    lcfirst EXPR$
ldexp	posix.man	/^    ldexp   This is identical to the C function "ldexp()" for multiplying$
ldiv	posix.man	/^    ldiv    (For computing dividends of long integers.) ldiv() is$
legal_keys	hashutil.man	/^    legal_keys$
legal_ref_keys	hashutil.man	/^    legal_ref_keys$
length	perlfunc.man	/^    length EXPR$
less	pragmaless.man	/^    less - perl pragma to request less of something$
lib	pragmalib.man	/^    lib - manipulate @INC at compile time$
like	testmore.man	/^    like$
link	perlfunc.man	/^    link OLDFILE,NEWFILE$
List::Util	listutil.man	1
listen	perlfunc.man	/^    listen SOCKET,QUEUESIZE$
LIST_SEPARATOR	perlvar.man	/^    $LIST_SEPARATOR$
local	perlfunc.man	/^    local EXPR$
locale	pragmalocale.man	/^    locale - Perl pragma to use and avoid POSIX locales for built-in$
localeconv	posix.man	/^    localeconv$
localtime	perlfunc.man	/^    localtime EXPR$
lock	perlfunc.man	/^    lock THING$
lock_hash	hashutil.man	/^    lock_hash$
lock_hashref	hashutil.man	/^    lock_hashref$
lock_hashref_recurse	hashutil.man	/^    lock_hashref_recurse$
lock_hash_recurse	hashutil.man	/^    lock_hash_recurse$
lock_keys	hashutil.man	/^    lock_keys$
lock_keys_plus	hashutil.man	/^    lock_keys_plus$
lock_ref_keys	hashutil.man	/^    lock_ref_keys$
lock_ref_keys_plus	hashutil.man	/^    lock_ref_keys_plus$
lock_ref_value	hashutil.man	/^    lock_ref_value$
lock_value	hashutil.man	/^    lock_value$
log	perlfunc.man	/^    log EXPR$
log10	posix.man	/^    log10   This is identical to the C function "log10()", returning the$
longjmp	posix.man	/^    longjmp longjmp() is C-specific: use "die" in perlfunc instead.$
look	searchdict.man	/^        look *FILEHANDLE, $key, $dict, $fold;$
looks_like_number	scalarutil.man	/^    looks_like_number EXPR$
lseek	posix.man	/^    lseek   Move the file's read/write position. This uses file descriptors$
lstat	perlfunc.man	/^    lstat EXPR$
M	perlfunc.man	/^                -M  Script start time minus file modification time, in days.$
m	perlfunc.man	/^    m//     The match operator. See "Regexp Quote-Like Operators" in perlop.$
make_path	filepath.man	/^    make_path( $dir1, $dir2, .... )$
malloc	posix.man	/^    malloc  malloc() is C-specific. Perl does memory management$
map	perlfunc.man	/^    map BLOCK LIST$
MATCH	perlvar.man	/^    $MATCH$
max	listutil.man	/^    max LIST$
maxstr	listutil.man	/^    maxstr LIST$
mblen	textcharwidth.man	/^      mblen(string);$
mbstowcs	posix.man	/^    mbstowcs$
mbswidth	textcharwidth.man	/^      mbswidth(string);$
mbtowc	posix.man	/^    mbtowc  This is identical to the C function "mbtowc()". Perl does not$
mbwidth	textcharwidth.man	/^      mbwidth(string);$
memchr	posix.man	/^    memchr  memchr() is C-specific, see "index" in perlfunc instead.$
memcmp	posix.man	/^    memcmp  memcmp() is C-specific, use "eq" instead, see perlop.$
memcpy	posix.man	/^    memcpy  memcpy() is C-specific, use "=", see perlop, or see "substr" in$
memmove	posix.man	/^    memmove memmove() is C-specific, use "=", see perlop, or see "substr" in$
memset	posix.man	/^    memset  memset() is C-specific, use "x" instead, see perlop.$
min	listutil.man	/^    min LIST$
minstr	listutil.man	/^    minstr LIST$
mkdir	perlfunc.man	/^    mkdir FILENAME,MASK$
mkfifo	posix.man	/^    mkfifo  This is similar to the C function "mkfifo()" for creating FIFO$
mkpath	filepath.man	/^    mkpath( $dir )$
mktime	posix.man	/^    mktime  Convert date/time info to a calendar time.$
modf	posix.man	/^    modf    Return the integral and fractional parts of a floating-point$
move	filecopy.man	/^    move$
mro	pragmamro.man	/^    mro - Method Resolution Order$
msgctl	perlfunc.man	/^    msgctl ID,CMD,ARG$
msgget	perlfunc.man	/^    msgget KEY,FLAGS$
msgrcv	perlfunc.man	/^    msgrcv ID,VAR,SIZE,TYPE,FLAGS$
msgsnd	perlfunc.man	/^    msgsnd ID,MSG,FLAGS$
my	perlfunc.man	/^    my EXPR$
nested_quotewords	textparsewords.man	/^      @lists = nested_quotewords($delim, $keep, @lines);$
new_ok	testmore.man	/^    new_ok$
next	perlfunc.man	/^    next LABEL$
nice	posix.man	/^    nice    This is similar to the C function "nice()", for changing the$
no	perlfunc.man	/^    no Module VERSION LIST$
no autodie	pragmaautodie.man	/^    autodie - Replace functions with ones that succeed or die with lexical$
no bigint	pragmabigint.man	/^    bigint - Transparent BigInteger support for Perl$
no bignum	pragmabignum.man	/^    bignum - Transparent BigNumber support for Perl$
no bigrat	pragmabigrat.man	/^    bigrat - Transparent BigNumber/BigRational support for Perl$
no bytes	pragmabytes.man	/^    bytes - Perl pragma to force byte semantics rather than character$
no encoding	pragmaencoding.man	/^    encoding - allows you to write your script in non-ascii or non-utf8$
no lib	pragmalib.man	/^    lib - manipulate @INC at compile time$
no overloading	pragmaoverloading.man	/^    overloading - perl pragma to lexically control overloading$
no re	pragmare.man	/^    re - Perl pragma to alter regular expression behaviour$
no sort	pragmasort.man	/^    sort - perl pragma to control sort() behaviour$
no strict	pragmastrict.man	/^    strict - Perl pragma to restrict unsafe constructs$
no utf8	pragmautf8.man	/^    utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source$
no vmsish	pragmavmsish.man	/^    vmsish - Perl pragma to control VMS-specific language features$
no warnings	pragmawarnings.man	/^    warnings - Perl pragma to control optional warnings$
note	testmore.man	/^    note$
NR	perlvar.man	/^    $NR$
o	perlfunc.man	/^                -o  File is owned by effective uid.$
O	perlfunc.man	/^                -O  File is owned by real uid.$
oct	perlfunc.man	/^    oct EXPR$
offsetof	posix.man	/^    offsetof$
OFS	perlvar.man	/^    $OFS$
ok	test.man	/^    "ok(...)"$
old_shellwords	textparsewords.man	/^      @words = old_shellwords(@lines); # DEPRECATED!$
open	perlfunc.man	/^    open FILEHANDLE,EXPR$
opendir	perlfunc.man	/^    opendir DIRHANDLE,EXPR$
openhandle	scalarutil.man	/^    openhandle FH$
ops	pragmaops.man	/^    ops - Perl pragma to restrict unsafe operations when compiling$
or	testmore.man	/^    or$
ord	perlfunc.man	/^    ord EXPR$
ORS	perlvar.man	/^    $ORS$
OSNAME	perlvar.man	/^    $OSNAME$
OS_ERROR	perlvar.man	/^    $OS_ERROR$
otherwise	error.man	/^    otherwise BLOCK$
our	perlfunc.man	/^    our EXPR$
OUTPUT_AUTOFLUSH	perlvar.man	/^    $OUTPUT_AUTOFLUSH$
OUTPUT_FIELD_SEPARATOR	perlvar.man	/^    $OUTPUT_FIELD_SEPARATOR$
OUTPUT_RECORD_SEPARATOR	perlvar.man	/^    $OUTPUT_RECORD_SEPARATOR$
overload	pragmaoverload.man	/^    overload - Package for overloading Perl operations$
overloading	pragmaoverloading.man	/^    overloading - perl pragma to lexically control overloading$
p	perlfunc.man	/^                -p  File is a named pipe (FIFO), or Filehandle is a pipe.$
pack	perlfunc.man	/^    pack TEMPLATE,LIST$
package	perlfunc.man	/^    package NAMESPACE$
parent	pragmaparent.man	/^    parent - Establish an ISA relationship with base classes at compile time$
parse_dir	filelisting.man	/^     $dir = parse_dir(\*LISTING, '+0000');$
parse_line	textparsewords.man	/^      @words = parse_line($delim, $keep, $line);$
pass	testmore.man	/^    pass$
pathconf	posix.man	/^    pathconf$
pause	posix.man	/^    pause   This is similar to the C function "pause()", which suspends the$
PERLDB	perlvar.man	/^    $PERLDB$
PERL_VERSION	perlvar.man	/^    $PERL_VERSION$
perror	posix.man	/^    perror  This is identical to the C function "perror()", which outputs to$
PID	perlvar.man	/^    $PID$
pipe	perlfunc.man	/^    pipe READHANDLE,WRITEHANDLE$
plan	test.man	/^    "plan(...)"$
pop	perlfunc.man	/^    pop ARRAY$
pos	perlfunc.man	/^    pos SCALAR$
POSIX	posix.man	1
POSTMATCH	perlvar.man	/^    $POSTMATCH$
pow	posix.man	/^    pow     Computes $x raised to the power $exponent.$
PREMATCH	perlvar.man	/^    $PREMATCH$
print	perlfunc.man	/^    print FILEHANDLE LIST$
printf	perlfunc.man	/^    printf FILEHANDLE FORMAT, LIST$
PROCESS_ID	perlvar.man	/^    $PROCESS_ID$
PROGRAM_NAME	perlvar.man	/^    $PROGRAM_NAME$
prototype	perlfunc.man	/^    prototype FUNCTION$
push	perlfunc.man	/^    push ARRAY,LIST$
putc	posix.man	/^    putc    putc() is C-specific, see "print" in perlfunc instead.$
putchar	posix.man	/^    putchar putchar() is C-specific, see "print" in perlfunc instead.$
puts	posix.man	/^    puts    puts() is C-specific, see "print" in perlfunc instead.$
q	perlfunc.man	/^    q/STRING/$
qq	perlfunc.man	/^    qq/STRING/$
qr	perlfunc.man	/^    qr/STRING/$
qsort	posix.man	/^    qsort   qsort() is C-specific, see "sort" in perlfunc instead.$
qualify	symbol.man	/^    "Symbol::qualify" turns unqualified symbol names into qualified variable$
qualify_to_ref	symbol.man	/^    "Symbol::qualify_to_ref" is just like "Symbol::qualify" except that it$
quotemeta	perlfunc.man	/^    quotemeta EXPR$
quotewords	textparsewords.man	/^      @words = quotewords($delim, $keep, @lines);$
qw	perlfunc.man	/^    qw/STRING/$
qx	perlfunc.man	/^    qx/STRING/$
R	perlfunc.man	/^                -R  File is readable by real uid/gid.$
r	perlfunc.man	/^                -r  File is readable by effective uid/gid.$
raise	posix.man	/^    raise   Sends the specified signal to the current process. See also$
rand	perlfunc.man	/^    rand EXPR$
re	pragmare.man	/^    re - Perl pragma to alter regular expression behaviour$
read	perlfunc.man	/^    read FILEHANDLE,SCALAR,LENGTH,OFFSET$
readdir	perlfunc.man	/^    readdir DIRHANDLE$
readline	perlfunc.man	/^    readline EXPR$
readlink	perlfunc.man	/^    readlink EXPR$
readonly	scalarutil.man	/^    readonly SCALAR$
readpipe	perlfunc.man	/^    readpipe EXPR$
realloc	posix.man	/^    realloc realloc() is C-specific. Perl does memory management$
realpath	cwd.man	/^    realpath$
REAL_GROUP_ID	perlvar.man	/^    $REAL_GROUP_ID$
REAL_USER_ID	perlvar.man	/^    $REAL_USER_ID$
recv	perlfunc.man	/^    recv SOCKET,SCALAR,LENGTH,FLAGS$
redo	perlfunc.man	/^    redo LABEL$
reduce	listutil.man	/^    reduce BLOCK LIST$
ref	perlfunc.man	/^    ref EXPR$
refaddr	scalarutil.man	/^    refaddr EXPR$
reftype	scalarutil.man	/^    reftype EXPR$
remove	posix.man	/^    remove  This is identical to Perl's builtin "unlink()" function for$
remove_tree	filepath.man	/^    remove_tree( $dir1, $dir2, .... )$
rename	perlfunc.man	/^    rename OLDNAME,NEWNAME$
require	perlfunc.man	/^    require VERSION$
require_ok	testmore.man	/^    require_ok$
reset	perlfunc.man	/^    reset EXPR$
return	perlfunc.man	/^    return EXPR$
reverse	perlfunc.man	/^    reverse LIST$
rewind	posix.man	/^    rewind  Seeks to the beginning of the file.$
rewinddir	perlfunc.man	/^    rewinddir DIRHANDLE$
rindex	perlfunc.man	/^    rindex STR,SUBSTR,POSITION$
rmdir	perlfunc.man	/^    rmdir FILENAME$
rmscopy	filecopy.man	/^    rmscopy($from,$to[,$date_flag])$
rmtree	filepath.man	/^    rmtree( $dir )$
RS	perlvar.man	/^    $RS$
runtests	testharness.man	/^  runtests( @test_files )$
S	perlfunc.man	/^                -S  File is a socket.$
s	perlfunc.man	/^                -s  File has nonzero size (returns size in bytes).$
say	perlfunc.man	/^    say FILEHANDLE LIST$
scalar	perlfunc.man	/^    scalar EXPR$
Scalar::Util	scalarutil.man	1
scanf	posix.man	/^    scanf   scanf() is C-specific, use <> and regular expressions instead,$
Search::Dict	searchdict.man	1
seek	perlfunc.man	/^    seek FILEHANDLE,POSITION,WHENCE$
seekdir	perlfunc.man	/^    seekdir DIRHANDLE,POS$
select	perlfunc.man	/^    select FILEHANDLE$
semctl	perlfunc.man	/^    semctl ID,SEMNUM,CMD,ARG$
semget	perlfunc.man	/^    semget KEY,NSEMS,FLAGS$
semop	perlfunc.man	/^    semop KEY,OPSTRING$
send	perlfunc.man	/^    send SOCKET,MSG,FLAGS,TO$
setgid	posix.man	/^    setgid  Sets the real group identifier and the effective group$
setgrent	perlfunc.man	/^    setgrent$
sethostent	perlfunc.man	/^    sethostent STAYOPEN$
setjmp	posix.man	/^    setjmp  "setjmp()" is C-specific: use "eval {}" instead, see "eval" in$
setlocale	posix.man	/^    setlocale$
setnetent	perlfunc.man	/^    setnetent STAYOPEN$
setpgid	posix.man	/^    setpgid This is similar to the C function "setpgid()" for setting the$
setpgrp	perlfunc.man	/^    setpgrp PID,PGRP$
setpriority	perlfunc.man	/^    setpriority WHICH,WHO,PRIORITY$
setprotoent	perlfunc.man	/^    setprotoent STAYOPEN$
setpwent	perlfunc.man	/^    setpwent$
setservent	perlfunc.man	/^    setservent STAYOPEN$
setsid	posix.man	/^    setsid  This is identical to the C function "setsid()" for setting the$
setsockopt	perlfunc.man	/^    setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL$
setuid	posix.man	/^    setuid  Sets the real user identifier and the effective user identifier$
set_prototype	scalarutil.man	/^    set_prototype CODEREF, PROTOTYPE$
shellwords	textparsewords.man	/^      @words = shellwords(@lines);$
shift	perlfunc.man	/^    shift ARRAY$
shmctl	perlfunc.man	/^    shmctl ID,CMD,ARG$
shmget	perlfunc.man	/^    shmget KEY,SIZE,FLAGS$
shmread	perlfunc.man	/^    shmread ID,VAR,POS,SIZE$
shmwrite	perlfunc.man	/^    shmwrite ID,STRING,POS,SIZE$
shuffle	listutil.man	/^    shuffle LIST$
shutdown	perlfunc.man	/^    shutdown SOCKET,HOW$
SIG	perlvar.man	/^    %SIG$
sigaction	posix.man	/^    sigaction$
siglongjmp	posix.man	/^    siglongjmp$
sigpending	posix.man	/^    sigpending$
sigprocmask	posix.man	/^    sigprocmask$
sigsetjmp	posix.man	/^    sigsetjmp$
sigsuspend	posix.man	/^    sigsuspend$
sigtrap	pragmasigtrap.man	/^    sigtrap - Perl pragma to enable simple signal handling$
sin	perlfunc.man	/^    sin EXPR$
sinh	posix.man	/^    sinh    This is identical to the C function "sinh()" for returning the$
skip	test.man	/^    "skip(...)". By default, all three are exported by the "use Test;"$
sleep	perlfunc.man	/^    sleep EXPR$
socket	perlfunc.man	/^    socket SOCKET,DOMAIN,TYPE,PROTOCOL$
socketpair	perlfunc.man	/^    socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL$
sort	perlfunc.man	/^    sort SUBNAME LIST$
soundex	textsoundex.man	/^      $code = soundex($name);    # Get the soundex code for a name.$
soundex_nara	textsoundex.man	/^      $code = soundex_nara($name);    # Get the soundex code for a name.$
splice	perlfunc.man	/^    splice ARRAY,OFFSET,LENGTH,LIST$
split	perlfunc.man	/^    split /PATTERN/,EXPR,LIMIT$
sprintf	perlfunc.man	/^    sprintf FORMAT, LIST$
sqrt	perlfunc.man	/^    sqrt EXPR$
srand	perlfunc.man	/^    srand EXPR$
sscanf	posix.man	/^    sscanf  sscanf() is C-specific, use regular expressions instead, see$
stat	perlfunc.man	/^    stat FILEHANDLE$
state	perlfunc.man	/^    state EXPR$
strcat	posix.man	/^    strcat  strcat() is C-specific, use ".=" instead, see perlop.$
strchr	posix.man	/^    strchr  strchr() is C-specific, see "index" in perlfunc instead.$
strcmp	posix.man	/^    strcmp  strcmp() is C-specific, use "eq" or "cmp" instead, see perlop.$
strcoll	posix.man	/^    strcoll This is identical to the C function "strcoll()" for collating$
strcpy	posix.man	/^    strcpy  strcpy() is C-specific, use "=" instead, see perlop.$
strcspn	posix.man	/^    strcspn strcspn() is C-specific, use regular expressions instead, see$
strerror	posix.man	/^    strerror$
strftime	posix.man	/^    strftime$
strict	pragmastrict.man	/^    strict - Perl pragma to restrict unsafe constructs$
strlen	posix.man	/^    strlen  strlen() is C-specific, use "length()" instead, see "length" in$
strncat	posix.man	/^    strncat strncat() is C-specific, use ".=" instead, see perlop.$
strncmp	posix.man	/^    strncmp strncmp() is C-specific, use "eq" instead, see perlop.$
strncpy	posix.man	/^    strncpy strncpy() is C-specific, use "=" instead, see perlop.$
strpbrk	posix.man	/^    strpbrk strpbrk() is C-specific, use regular expressions instead, see$
strrchr	posix.man	/^    strrchr strrchr() is C-specific, see "rindex" in perlfunc instead.$
strspn	posix.man	/^    strspn  strspn() is C-specific, use regular expressions instead, see$
strstr	posix.man	/^    strstr  This is identical to Perl's builtin "index()" function, see$
strtod	posix.man	/^    strtod  String to double translation. Returns the parsed number and the$
strtok	posix.man	/^    strtok  strtok() is C-specific, use regular expressions instead, see$
strtol	posix.man	/^    strtol  String to (long) integer translation. Returns the parsed number$
strtoul	posix.man	/^    strtoul String to unsigned (long) integer translation. strtoul() is$
struct	classstruct.man	/^                # declare struct, based on array:$
strxfrm	posix.man	/^    strxfrm String transformation. Returns the transformed string.$
study	perlfunc.man	/^    study SCALAR$
sub	perlfunc.man	/^    sub NAME BLOCK$
subs	pragmasubs.man	/^    subs - Perl pragma to predeclare sub names$
SUBSCRIPT_SEPARATOR	perlvar.man	/^    $SUBSCRIPT_SEPARATOR$
SUBSEP	perlvar.man	/^    $SUBSEP$
substr	perlfunc.man	/^    substr EXPR,OFFSET,LENGTH,REPLACEMENT$
sum	listutil.man	/^    sum LIST$
switch	switch.man	/^        switch ($val) {$
Switch	switch.man	1
Symbol	symbol.man	1
symlink	perlfunc.man	/^    symlink OLDFILE,NEWFILE$
syscall	perlfunc.man	/^    syscall NUMBER, LIST$
sysconf	posix.man	/^    sysconf Retrieves values of system configurable variables.$
syscopy	filecopy.man	/^    syscopy$
sysopen	perlfunc.man	/^    sysopen FILEHANDLE,FILENAME,MODE$
sysread	perlfunc.man	/^    sysread FILEHANDLE,SCALAR,LENGTH,OFFSET$
sysseek	perlfunc.man	/^    sysseek FILEHANDLE,POSITION,WHENCE$
system	perlfunc.man	/^    system LIST$
SYSTEM_FD_MAX	perlvar.man	/^    $SYSTEM_FD_MAX$
syswrite	perlfunc.man	/^    syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET$
T	perlfunc.man	/^                -T  File is an ASCII text file (heuristic guess).$
t	perlfunc.man	/^                -t  Filehandle is opened to a tty.$
tainted	scalarutil.man	/^    tainted EXPR$
tan	posix.man	/^    tan     This is identical to the C function "tan()", returning the$
tanh	posix.man	/^    tanh    This is identical to the C function "tanh()", returning the$
tcdrain	posix.man	/^    tcdrain This is similar to the C function "tcdrain()" for draining the$
tcflow	posix.man	/^    tcflow  This is similar to the C function "tcflow()" for controlling the$
tcflush	posix.man	/^    tcflush This is similar to the C function "tcflush()" for flushing the$
tcgetpgrp	posix.man	/^    tcgetpgrp$
tcsendbreak	posix.man	/^    tcsendbreak$
tcsetpgrp	posix.man	/^    tcsetpgrp$
tell	perlfunc.man	/^    tell FILEHANDLE$
telldir	perlfunc.man	/^    telldir DIRHANDLE$
tempdir	filetemp.man	/^    tempdir$
tempfile	filetemp.man	/^    tempfile$
Test	test.man	1
Test::Harness	testharness.man	1
Test::More	testmore.man	1
Text::Abbrev	textabbrev.man	1
Text::Balanced	textbalanced.man	1
Text::CharWidth	textcharwidth.man	1
Text::ParseWords	textparsewords.man	1
Text::Soundex	textsoundex.man	1
Text::Tabs	texttabs.man	1
Text::Wrap	textwrap.man	1
threads	pragmathreads.man	/^    threads - Perl interpreter-based threads$
tie	perlfunc.man	/^    tie VARIABLE,CLASSNAME,LIST$
tied	perlfunc.man	/^    tied VARIABLE$
time	perlfunc.man	/^    time    Returns the number of non-leap seconds since whatever time the$
Time::Zone	timezone.man	1
timediff	benchmark.man	/^    timediff ( T1, T2 )$
timeit	benchmark.man	/^    timeit(COUNT, CODE)$
times	perlfunc.man	/^    times   Returns a four-element list giving the user and system times, in$
timestr	benchmark.man	/^    timestr ( TIMEDIFF, [ STYLE, [ FORMAT ] ] )$
timesum	benchmark.man	/^    timesum ( T1, T2 )$
timethese	benchmark.man	/^    timethese ( COUNT, CODEHASHREF, [ STYLE ] )$
timethis	benchmark.man	/^    timethis ( COUNT, CODE, [ TITLE, [ STYLE ]] )$
tmpfile	posix.man	/^    tmpfile Use method "IO::File::new_tmpfile()" instead, or see File::Temp.$
tmpnam	posix.man	/^    tmpnam  Returns a name for a temporary file.$
todo_skip	testmore.man	/^    todo_skip$
tolower	posix.man	/^    tolower This is identical to the C function, except that it can apply to$
toupper	posix.man	/^    toupper This is identical to the C function, except that it can apply to$
tr	perlfunc.man	/^    tr///   The transliteration operator. Same as "y///". See "Quote and$
truncate	perlfunc.man	/^    truncate FILEHANDLE,LENGTH$
try	error.man	/^    try BLOCK CLAUSES$
ttyname	posix.man	/^    ttyname This is identical to the C function "ttyname()" for returning$
tz2zone	timezone.man	/^    "tz2zone()" parses the TZ environment variable and returns a timezone$
tzname	posix.man	/^    tzname  Retrieves the time conversion information from the "tzname"$
tzset	posix.man	/^    tzset   This is identical to the C function "tzset()" for setting the$
tz_local_offset	timezone.man	/^    "tz_local_offset()" determins the offset from GMT time in seconds. It$
tz_name	timezone.man	/^    "tz_name()" determines the name of the timezone based on its offset$
tz_offset	timezone.man	/^    "tz_offset()" determines the offset from GMT in seconds of a specified$
u	perlfunc.man	/^                -u  File has setuid bit set.$
uc	perlfunc.man	/^    uc EXPR$
ucfirst	perlfunc.man	/^    ucfirst EXPR$
UID	perlvar.man	/^    $UID$
umask	perlfunc.man	/^    umask EXPR$
uname	posix.man	/^    uname   Get name of current operating system.$
undef	perlfunc.man	/^    undef EXPR$
unexpand	texttabs.man	/^      @lines_with_tabs = unexpand(@lines_without_tabs);$
ungetc	posix.man	/^    ungetc  Use method "IO::Handle::ungetc()" instead.$
unlike	testmore.man	/^    unlike$
unlink	perlfunc.man	/^    unlink LIST$
unlock_hash	hashutil.man	/^    unlock_hash$
unlock_hashref	hashutil.man	/^    unlock_hashref$
unlock_hashref_recurse	hashutil.man	/^    unlock_hashref_recurse$
unlock_hash_recurse	hashutil.man	/^    unlock_hash_recurse$
unlock_keys	hashutil.man	/^    unlock_keys$
unlock_ref_keys	hashutil.man	/^    unlock_ref_keys$
unlock_ref_value	hashutil.man	/^    unlock_ref_value$
unlock_value	hashutil.man	/^    unlock_value$
unpack	perlfunc.man	/^    unpack TEMPLATE,EXPR$
unshift	perlfunc.man	/^    unshift ARRAY,LIST$
untie	perlfunc.man	/^    untie VARIABLE$
use	perlfunc.man	/^    use Module VERSION LIST$
use attributes	pragmaattributes.man	/^    attributes - get/set subroutine or variable attributes$
use attrs	pragmaattrs.man	/^    attrs - set/get attributes of a subroutine (deprecated)$
use autodie	pragmaautodie.man	/^    autodie - Replace functions with ones that succeed or die with lexical$
use autouse	pragmaautouse.man	/^    autouse - postpone load of modules until a function is used$
use base	pragmabase.man	/^    base - Establish an ISA relationship with base classes at compile time$
use bigint	pragmabigint.man	/^    bigint - Transparent BigInteger support for Perl$
use bignum	pragmabignum.man	/^    bignum - Transparent BigNumber support for Perl$
use bigrat	pragmabigrat.man	/^    bigrat - Transparent BigNumber/BigRational support for Perl$
use blib	pragmablib.man	/^    blib - Use MakeMaker's uninstalled version of a package$
use bytes	pragmabytes.man	/^    bytes - Perl pragma to force byte semantics rather than character$
use charnames	pragmacharnames.man	/^    charnames - define character names for "\N{named}" string literal$
use constant	pragmaconstant.man	/^    constant - Perl pragma to declare constants$
use diagnostics	pragmadiagnostics.man	/^$
use encoding	pragmaencoding.man	/^    encoding - allows you to write your script in non-ascii or non-utf8$
use feature	pragmafeature.man	/^    feature - Perl pragma to enable new syntactic features$
use fields	pragmafields.man	/^    fields - compile-time class fields$
use filetest	pragmafiletest.man	/^    filetest - Perl pragma to control the filetest permission operators$
use if	pragmaif.man	/^    if - "use" a Perl module if a condition holds$
use integer	pragmainteger.man	/^    integer - Perl pragma to use integer arithmetic instead of floating$
use less	pragmaless.man	/^    less - perl pragma to request less of something$
use lib	pragmalib.man	/^    lib - manipulate @INC at compile time$
use locale	pragmalocale.man	/^    locale - Perl pragma to use and avoid POSIX locales for built-in$
use mro	pragmamro.man	/^    mro - Method Resolution Order$
use open	pragmaopen.man	/^    open - perl pragma to set default PerlIO layers for input and output$
use ops	pragmaops.man	/^    ops - Perl pragma to restrict unsafe operations when compiling$
use overload	pragmaoverload.man	/^    overload - Package for overloading Perl operations$
use overloading	pragmaoverloading.man	/^    overloading - perl pragma to lexically control overloading$
use parent	pragmaparent.man	/^    parent - Establish an ISA relationship with base classes at compile time$
use re	pragmare.man	/^    re - Perl pragma to alter regular expression behaviour$
use sigtrap	pragmasigtrap.man	/^    sigtrap - Perl pragma to enable simple signal handling$
use sort	pragmasort.man	/^    sort - perl pragma to control sort() behaviour$
use strict	pragmastrict.man	/^    strict - Perl pragma to restrict unsafe constructs$
use subs	pragmasubs.man	/^    subs - Perl pragma to predeclare sub names$
use threads	pragmathreads.man	/^    threads - Perl interpreter-based threads$
use utf8	pragmautf8.man	/^    utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source$
use vars	pragmavars.man	/^    vars - Perl pragma to predeclare global variable names (obsolete)$
use version	pragmaversion.man	/^    version - Perl extension for Version Objects$
use vmsish	pragmavmsish.man	/^    vmsish - Perl pragma to control VMS-specific language features$
use warnings	pragmawarnings.man	/^    warnings - Perl pragma to control optional warnings$
use_ok	testmore.man	/^    use_ok$
utf8	pragmautf8.man	/^    utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source$
utime	perlfunc.man	/^    utime LIST$
validate	filechecktree.man	/^        $num_warnings = validate( q{$
values	perlfunc.man	/^    values HASH$
vars	pragmavars.man	/^    vars - Perl pragma to predeclare global variable names (obsolete)$
vec	perlfunc.man	/^    vec EXPR,OFFSET,BITS$
version	pragmaversion.man	/^    version - Perl extension for Version Objects$
vfprintf	posix.man	/^    vfprintf$
vmsish	pragmavmsish.man	/^    vmsish - Perl pragma to control VMS-specific language features$
vprintf	posix.man	/^    vprintf vprintf() is C-specific, see "printf" in perlfunc instead.$
vsprintf	posix.man	/^    vsprintf$
w	perlfunc.man	/^                -w  File is writable by effective uid/gid.$
W	perlfunc.man	/^                -W  File is writable by real uid/gid.$
wait	perlfunc.man	/^    wait    Behaves like the wait(2) system call on your system: it waits$
waitpid	perlfunc.man	/^    waitpid PID,FLAGS$
wantarray	perlfunc.man	/^    wantarray$
warn	perlfunc.man	/^    warn LIST$
WARNING	perlvar.man	/^    $WARNING$
warnings	pragmawarnings.man	/^    warnings - Perl pragma to control optional warnings$
wcstombs	posix.man	/^    wcstombs$
wctomb	posix.man	/^    wctomb  This is identical to the C function "wctomb()". Perl does not$
weaken	scalarutil.man	/^    weaken REF$
wrap	textwrap.man	/^    "Text::Wrap::wrap()" is a very simple paragraph formatter. It formats a$
write	perlfunc.man	/^    write FILEHANDLE$
X	perlfunc.man	/^                -X  File is executable by real uid/gid.$
x	perlfunc.man	/^                -x  File is executable by effective uid/gid.$
y	perlfunc.man	/^    y///    The transliteration operator. Same as "tr///". See "Quote and$
z	perlfunc.man	/^                -z  File has zero size (is empty).$
[	perlvar.man	/^    $[      The index of the first element in an array, and of the first$
\	perlvar.man	/^    $\      The output record separator for the print operator. If defined,$
]	perlvar.man	/^    $]      The version + patchlevel / 1000 of the Perl interpreter. This$
^	perlvar.man	/^    $^      The name of the current top-of-page format for the currently$
^A	perlvar.man	/^    $^A     The current value of the write() accumulator for format() lines.$
^C	perlvar.man	/^    $^C     The current value of the flag associated with the -c switch.$
^D	perlvar.man	/^    $^D     The current value of the debugging flags. (Mnemonic: value of -D$
^E	perlvar.man	/^    $^E     Error information specific to the current operating system. At$
^F	perlvar.man	/^    $^F     The maximum system file descriptor, ordinarily 2. System file$
^H	perlvar.man	/^    $^H     WARNING: This variable is strictly for internal use only. Its$
^I	perlvar.man	/^    $^I     The current value of the inplace-edit extension. Use "undef" to$
^L	perlvar.man	/^    $^L     What formats output as a form feed. Default is \f.$
^M	perlvar.man	/^    $^M     By default, running out of memory is an untrappable, fatal$
^N	perlvar.man	/^    $^N     The text matched by the used group most-recently closed (i.e.$
^O	perlvar.man	/^    $^O     The name of the operating system under which this copy of Perl$
^P	perlvar.man	/^    $^P     The internal variable for debugging support. The meanings of the$
^R	perlvar.man	/^    $^R     The result of evaluation of the last successful "(?{ code })"$
^S	perlvar.man	/^    $^S     Current state of the interpreter.$
^T	perlvar.man	/^    $^T     The time at which the program began running, in seconds since$
^V	perlvar.man	/^    $^V     The revision, version, and subversion of the Perl interpreter,$
^W	perlvar.man	/^    $^W     The current value of the warning switch, initially true if -w$
^X	perlvar.man	/^    $^X     The name used to execute the current copy of Perl, from C's$
_	perlvar.man	/^    $_      The default input and pattern-searching space. The following$
_exit	posix.man	/^    _exit   This is identical to the C function "_exit()". It exits the$
`	perlvar.man	/^    $`      The string preceding whatever was matched by the last successful$
|	perlvar.man	/^    $|      If set to nonzero, forces a flush right away and after every$
~	perlvar.man	/^    $~      The name of the current report format for the currently selected$
